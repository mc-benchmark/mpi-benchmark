channel D0_0_in
channel D0_0_out
channel d0_0_in
channel X0_0_in
channel D0_1_in
channel D0_1_out
channel d0_1_in
channel X0_1_in
channel D0_2_in
channel D0_2_out
channel d0_2_in
channel X0_2_in
channel D1_0_in
channel D1_0_out
channel d1_0_in
channel X1_0_in
channel D2_0_in
channel D2_0_out
channel d2_0_in
channel X2_0_in
channel D3_0_in
channel D3_0_out
channel d3_0_in
channel X3_0_in
channel D3_1_in
channel D3_1_out
channel d3_1_in
channel X3_1_in
channel S0_3_in
channel S0_3_out
channel S0_4_in
channel S0_4_out
channel S0_5_in
channel S0_5_out
channel S0_6_in
channel S0_6_out
channel S1_0_in
channel S1_0_out
channel S2_0_in
channel S2_0_out
channel S3_0_in
channel S3_0_out
channel d3_0_out_1
channel X3_0_out_1

skip_loop = SKIP; skip_loop
d3_0_out_skip_loop = SKIP [] (d3_0_out_1 -> SKIP); d3_0_out_skip_loop
X3_0(0) = SKIP [] (X3_0_in -> SKIP; (SKIP [] X3_0_out_1 -> SKIP))

T0 = (D1_0_out -> d1_0_in -> X1_0_in -> SKIP [] D2_0_out -> d2_0_in -> X2_0_in -> SKIP [] D3_0_out -> d3_0_in -> X3_0_in -> SKIP [] (d3_0_out_1 -> SKIP; T0) [] X3_0_out_1 -> D3_1_out -> d3_1_in -> X3_1_in -> SKIP)
T1 = (D1_0_out -> d1_0_in -> X1_0_in -> SKIP [] D2_0_out -> d2_0_in -> X2_0_in -> SKIP [] D3_0_out -> d3_0_in -> X3_0_in -> SKIP [] (d3_0_out_1 -> SKIP; T1) [] X3_0_out_1 -> D3_1_out -> d3_1_in -> X3_1_in -> SKIP)
T2 = (D1_0_out -> d1_0_in -> X1_0_in -> SKIP [] D2_0_out -> d2_0_in -> X2_0_in -> SKIP [] D3_0_out -> d3_0_in -> X3_0_in -> SKIP [] (d3_0_out_1 -> SKIP; T2) [] X3_0_out_1 -> D3_1_out -> d3_1_in -> X3_1_in -> SKIP)

P(0) = D0_0_in -> SKIP; D0_1_in -> SKIP; D0_2_in -> SKIP; (D1_0_out -> d1_0_in -> X1_0_in -> SKIP [] D2_0_out -> d2_0_in -> X2_0_in -> SKIP [] D3_0_out -> d3_0_in -> X3_0_in -> SKIP); S0_3_in -> SKIP; T0; S0_4_in -> SKIP; T1; S0_5_in -> SKIP; T2; S0_6_in -> SKIP
P(1) = (D0_0_out -> d0_0_in -> X0_0_in -> SKIP); S1_0_in -> SKIP; D1_0_in -> SKIP
P(2) = (D0_1_out -> d0_1_in -> X0_1_in -> SKIP); S2_0_in -> SKIP; D2_0_in -> SKIP
P(3) = (D0_2_out -> d0_2_in -> X0_2_in -> SKIP); S3_0_in -> SKIP; D3_0_in -> SKIP; D3_1_in -> SKIP


P_num = {0..3}
Process = [|{}|] i:P_num @ P(i)

ch(0) = SKIP [] (D0_0_in -> SKIP; (SKIP [] D0_0_out -> SKIP))
ch(1) = SKIP [] d0_0_in -> SKIP
ch(2) = SKIP [] X0_0_in -> SKIP
ch(3) = SKIP [] (D0_1_in -> SKIP; (SKIP [] D0_1_out -> SKIP))
ch(4) = SKIP [] d0_1_in -> SKIP
ch(5) = SKIP [] X0_1_in -> SKIP
ch(6) = SKIP [] (D0_2_in -> SKIP; (SKIP [] D0_2_out -> SKIP))
ch(7) = SKIP [] d0_2_in -> SKIP
ch(8) = SKIP [] X0_2_in -> SKIP
ch(9) = SKIP [] (D1_0_in -> SKIP; (SKIP [] D1_0_out -> SKIP))
ch(10) = SKIP [] d1_0_in -> SKIP
ch(11) = SKIP [] X1_0_in -> SKIP
ch(12) = SKIP [] (D2_0_in -> SKIP; (SKIP [] D2_0_out -> SKIP))
ch(13) = SKIP [] d2_0_in -> SKIP
ch(14) = SKIP [] X2_0_in -> SKIP
ch(15) = SKIP [] (D3_0_in -> SKIP; (SKIP [] D3_0_out -> SKIP))
ch(16) = SKIP [] d3_0_in -> SKIP; d3_0_out_skip_loop
ch(17) = [|{X3_0_in}|] i:{0..0} @ X3_0(i)
ch(18) = SKIP [] (D3_1_in -> SKIP; (SKIP [] D3_1_out -> SKIP))
ch(19) = SKIP [] d3_1_in -> SKIP
ch(20) = SKIP [] X3_1_in -> SKIP
ch(21) = SKIP [] (S0_3_in -> SKIP; (SKIP [] S0_3_out -> SKIP))
ch(22) = SKIP [] (S0_4_in -> SKIP; (SKIP [] S0_4_out -> SKIP))
ch(23) = SKIP [] (S0_5_in -> SKIP; (SKIP [] S0_5_out -> SKIP))
ch(24) = SKIP [] (S0_6_in -> SKIP; (SKIP [] S0_6_out -> SKIP))
ch(25) = SKIP [] (S1_0_in -> SKIP; (SKIP [] S1_0_out -> SKIP))
ch(26) = SKIP [] (S2_0_in -> SKIP; (SKIP [] S2_0_out -> SKIP))
ch(27) = SKIP [] (S3_0_in -> SKIP; (SKIP [] S3_0_out -> SKIP))
ch_num = {0..27}
Channel = [|{}|] i:ch_num @ ch(i)

Q = (Process [|{D0_0_in, D0_0_out, d0_0_in, X0_0_in, D0_1_in, D0_1_out, d0_1_in, X0_1_in, D0_2_in, D0_2_out, d0_2_in, X0_2_in, D1_0_in, D1_0_out, d1_0_in, X1_0_in, D2_0_in, D2_0_out, d2_0_in, X2_0_in, D3_0_in, D3_0_out, d3_0_in, X3_0_in, D3_1_in, D3_1_out, d3_1_in, X3_1_in, S0_3_in, S0_3_out, S0_4_in, S0_4_out, S0_5_in, S0_5_out, S0_6_in, S0_6_out, S1_0_in, S1_0_out, S2_0_in, S2_0_out, S3_0_in, S3_0_out, d3_0_out_1, X3_0_out_1}|] Channel); skip_loop

assert Q :[deadlock free[F]]