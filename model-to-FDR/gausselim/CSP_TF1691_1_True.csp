channel D0_0_in
channel D0_0_out
channel d0_0_in
channel X0_0_in
channel D0_1_in
channel D0_1_out
channel d0_1_in
channel X0_1_in
channel D1_0_in
channel D1_0_out
channel d1_0_in
channel X1_0_in
channel S0_3_in
channel S0_3_out
channel S1_2_in
channel S1_2_out
channel S1_8_in
channel S1_8_out
channel B0
channel B1
channel B2
channel B3
channel B4
channel B5

skip_loop = SKIP; skip_loop


P(0) = B5 -> SKIP; B4 -> SKIP; D0_0_in -> SKIP; (D1_0_out -> d1_0_in -> X1_0_in -> SKIP); S0_3_in -> SKIP; B3 -> SKIP; B2 -> SKIP; B1 -> SKIP; B0 -> SKIP; D0_1_in -> SKIP
P(1) = B5 -> SKIP; B4 -> SKIP; (D0_0_out -> d0_0_in -> X0_0_in -> SKIP); S1_2_in -> SKIP; D1_0_in -> SKIP; B3 -> SKIP; B2 -> SKIP; B1 -> SKIP; B0 -> SKIP; (D0_1_out -> d0_1_in -> X0_1_in -> SKIP); S1_8_in -> SKIP


P_num = {0..1}
Process = [|{B0,B1,B2,B3,B4,B5}|] i:P_num @ P(i)

ch(0) = SKIP [] (D0_0_in -> SKIP; (SKIP [] D0_0_out -> SKIP))
ch(1) = SKIP [] d0_0_in -> SKIP
ch(2) = SKIP [] X0_0_in -> SKIP
ch(3) = SKIP [] (D0_1_in -> SKIP; (SKIP [] D0_1_out -> SKIP))
ch(4) = SKIP [] d0_1_in -> SKIP
ch(5) = SKIP [] X0_1_in -> SKIP
ch(6) = SKIP [] (D1_0_in -> SKIP; (SKIP [] D1_0_out -> SKIP))
ch(7) = SKIP [] d1_0_in -> SKIP
ch(8) = SKIP [] X1_0_in -> SKIP
ch(9) = SKIP [] (S0_3_in -> SKIP; (SKIP [] S0_3_out -> SKIP))
ch(10) = SKIP [] (S1_2_in -> SKIP; (SKIP [] S1_2_out -> SKIP))
ch(11) = SKIP [] (S1_8_in -> SKIP; (SKIP [] S1_8_out -> SKIP))
ch_num = {0..11}
Channel = [|{}|] i:ch_num @ ch(i)

Q = (Process [|{D0_0_in, D0_0_out, d0_0_in, X0_0_in, D0_1_in, D0_1_out, d0_1_in, X0_1_in, D1_0_in, D1_0_out, d1_0_in, X1_0_in, S0_3_in, S0_3_out, S1_2_in, S1_2_out, S1_8_in, S1_8_out}|] Channel); skip_loop

assert Q :[deadlock free[F]]